package com.bigjelly.temporun;

import android.app.Activity;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioTrack;
import android.os.Bundle;
import java.io.InputStream;
import java.net.URL;

import javazoom.jl.decoder.Bitstream;
import javazoom.jl.decoder.Decoder;
import javazoom.jl.decoder.Header;
import javazoom.jl.decoder.SampleBuffer;

import android.view.View;
import android.view.KeyEvent;

//service 3: rain.
//login:
import android.app.ProgressDialog;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
//new:
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import java.util.ArrayList;
import java.util.HashMap;
import android.widget.ListView;
//populate:
import android.widget.ListAdapter;
import android.widget.ArrayAdapter;
import android.widget.Switch;
//login;

import android.widget.ListView;
//populate:
import android.widget.ListAdapter;
import android.widget.ArrayAdapter;
import android.view.KeyEvent;

//timer handler:
import android.os.Handler;
import java.text.SimpleDateFormat;
import java.util.Calendar;

//android ID:
import android.provider.Settings.Secure;
import android.widget.Switch;
import android.widget.CompoundButton;
import android.widget.Toast;
//import android.app.*;

import android.widget.TextView;

public class MainActivity extends Activity {

    private Decoder mDecoder;
    private AudioTrack mAudioTrack;
	private TextView etEmail, etPassword, tvResult;
	//check login:
	private Integer counterCheck = 0;
	private String inputCmd = "";

	public static final int CONNECTION_TIMEOUT=10000;
	public static final int READ_TIMEOUT=15000;
	private ListView listview;
	private ArrayList<HashMap<String, String>> contactJsonList;
	private String rebootCmd = "";
	private String msgCmd = "";
	//check login;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

	public void startSong(View v) {
		//final int sampleRate = 44100;
		final int sampleRate = 48000;
        final int minBufferSize = AudioTrack.getMinBufferSize(sampleRate,
															  AudioFormat.CHANNEL_OUT_STEREO,
															  AudioFormat.ENCODING_PCM_16BIT);

        mAudioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
									 sampleRate,
									 AudioFormat.CHANNEL_OUT_STEREO,
									 AudioFormat.ENCODING_PCM_16BIT,
									 minBufferSize,
									 AudioTrack.MODE_STREAM);

        mDecoder = new Decoder();
        Thread thread = new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						InputStream in = new URL("https://orlando.heliohost.org/app/downloads/agnes-cuj.mp3")
						    .openConnection()
                            .getInputStream();
						Bitstream bitstream = new Bitstream(in);

						final int READ_THRESHOLD = 2147483647;
						int framesReaded = 0;

						Header header;
						for(; framesReaded++ <= READ_THRESHOLD && (header = bitstream.readFrame()) != null;) {
							SampleBuffer sampleBuffer = (SampleBuffer) mDecoder.decodeFrame(header, bitstream);
							short[] buffer = sampleBuffer.getBuffer();
							mAudioTrack.write(buffer, 0, buffer.length);
							bitstream.closeFrame();
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
        thread.start();

        mAudioTrack.play();
	}
	
	public void songSlankMM(View v) {
		final int sampleRate = 48000;
        final int minBufferSize = AudioTrack.getMinBufferSize(sampleRate,
															  AudioFormat.CHANNEL_OUT_STEREO,
															  AudioFormat.ENCODING_PCM_16BIT);

        mAudioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
									 sampleRate,
									 AudioFormat.CHANNEL_OUT_STEREO,
									 AudioFormat.ENCODING_PCM_16BIT,
									 minBufferSize,
									 AudioTrack.MODE_STREAM);

        mDecoder = new Decoder();
        Thread thread = new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						InputStream in = new URL("https://orlando.heliohost.org/app/downloads/slank-mawar_merah.mp3")	
                            .openConnection()
                            .getInputStream();
						Bitstream bitstream = new Bitstream(in);

						final int READ_THRESHOLD = 2147483647;
						int framesReaded = 0;

						Header header;
						for(; framesReaded++ <= READ_THRESHOLD && (header = bitstream.readFrame()) != null;) {
							SampleBuffer sampleBuffer = (SampleBuffer) mDecoder.decodeFrame(header, bitstream);
							short[] buffer = sampleBuffer.getBuffer();
							mAudioTrack.write(buffer, 0, buffer.length);
							bitstream.closeFrame();
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
        thread.start();

        mAudioTrack.play();
	}
	
	public void songSlankBiru(View v) {
		final int sampleRate = 48000;
        final int minBufferSize = AudioTrack.getMinBufferSize(sampleRate,
															  AudioFormat.CHANNEL_OUT_STEREO,
															  AudioFormat.ENCODING_PCM_16BIT);

        mAudioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
									 sampleRate,
									 AudioFormat.CHANNEL_OUT_STEREO,
									 AudioFormat.ENCODING_PCM_16BIT,
									 minBufferSize,
									 AudioTrack.MODE_STREAM);

        mDecoder = new Decoder();
        Thread thread = new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						InputStream in = new URL("https://orlando.heliohost.org/app/downloads/slank-biru.mp3")	
                            .openConnection()
                            .getInputStream();
						Bitstream bitstream = new Bitstream(in);

						final int READ_THRESHOLD = 2147483647;
						int framesReaded = 0;

						Header header;
						for(; framesReaded++ <= READ_THRESHOLD && (header = bitstream.readFrame()) != null;) {
							SampleBuffer sampleBuffer = (SampleBuffer) mDecoder.decodeFrame(header, bitstream);
							short[] buffer = sampleBuffer.getBuffer();
							mAudioTrack.write(buffer, 0, buffer.length);
							bitstream.closeFrame();
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
        thread.start();

        mAudioTrack.play();
	}
	
	public void songSlankJM(View v) {
		final int sampleRate = 48000;
        final int minBufferSize = AudioTrack.getMinBufferSize(sampleRate,
															  AudioFormat.CHANNEL_OUT_STEREO,
															  AudioFormat.ENCODING_PCM_16BIT);

        mAudioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
									 sampleRate,
									 AudioFormat.CHANNEL_OUT_STEREO,
									 AudioFormat.ENCODING_PCM_16BIT,
									 minBufferSize,
									 AudioTrack.MODE_STREAM);

        mDecoder = new Decoder();
        Thread thread = new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						InputStream in = new URL("https://orlando.heliohost.org/app/downloads/slank-JM.mp3")	
                            .openConnection()
                            .getInputStream();
						Bitstream bitstream = new Bitstream(in);

						final int READ_THRESHOLD = 2147483647;
						int framesReaded = 0;

						Header header;
						for(; framesReaded++ <= READ_THRESHOLD && (header = bitstream.readFrame()) != null;) {
							SampleBuffer sampleBuffer = (SampleBuffer) mDecoder.decodeFrame(header, bitstream);
							short[] buffer = sampleBuffer.getBuffer();
							mAudioTrack.write(buffer, 0, buffer.length);
							bitstream.closeFrame();
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
        thread.start();

        mAudioTrack.play();
	}
	
	public void songSeventeenKemarin(View v) {
		final int sampleRate = 48000;
        final int minBufferSize = AudioTrack.getMinBufferSize(sampleRate,
															  AudioFormat.CHANNEL_OUT_STEREO,
															  AudioFormat.ENCODING_PCM_16BIT);

        mAudioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
									 sampleRate,
									 AudioFormat.CHANNEL_OUT_STEREO,
									 AudioFormat.ENCODING_PCM_16BIT,
									 minBufferSize,
									 AudioTrack.MODE_STREAM);

        mDecoder = new Decoder();
        Thread thread = new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						InputStream in = new URL("https://orlando.heliohost.org/app/downloads/Slank-Virus.mp3")
						    .openConnection()
                            .getInputStream();
						Bitstream bitstream = new Bitstream(in);

						final int READ_THRESHOLD = 2147483647;
						int framesReaded = 0;

						Header header;
						for(; framesReaded++ <= READ_THRESHOLD && (header = bitstream.readFrame()) != null;) {
							SampleBuffer sampleBuffer = (SampleBuffer) mDecoder.decodeFrame(header, bitstream);
							short[] buffer = sampleBuffer.getBuffer();
							mAudioTrack.write(buffer, 0, buffer.length);
							bitstream.closeFrame();
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
        thread.start();

        mAudioTrack.play();
	}
	
	public void songGnRNovemberRain(View v) {
		final int sampleRate = 48000;
        final int minBufferSize = AudioTrack.getMinBufferSize(sampleRate,
															  AudioFormat.CHANNEL_OUT_STEREO,
															  AudioFormat.ENCODING_PCM_16BIT);

        mAudioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
									 sampleRate,
									 AudioFormat.CHANNEL_OUT_STEREO,
									 AudioFormat.ENCODING_PCM_16BIT,
									 minBufferSize,
									 AudioTrack.MODE_STREAM);

        mDecoder = new Decoder();
        Thread thread = new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						InputStream in = new URL("https://orlando.heliohost.org/app/downloads/GunsNRoses-NovemberRain.mp3")
                            .openConnection()
                            .getInputStream();
						Bitstream bitstream = new Bitstream(in);

						final int READ_THRESHOLD = 2147483647;
						int framesReaded = 0;

						Header header;
						for(; framesReaded++ <= READ_THRESHOLD && (header = bitstream.readFrame()) != null;) {
							SampleBuffer sampleBuffer = (SampleBuffer) mDecoder.decodeFrame(header, bitstream);
							short[] buffer = sampleBuffer.getBuffer();
							mAudioTrack.write(buffer, 0, buffer.length);
							bitstream.closeFrame();
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
        thread.start();

        mAudioTrack.play();
	}
	
	public void songDCinnamonsSC(View v) {
		final int sampleRate = 48000;
        final int minBufferSize = AudioTrack.getMinBufferSize(sampleRate,
															  AudioFormat.CHANNEL_OUT_STEREO,
															  AudioFormat.ENCODING_PCM_16BIT);

        mAudioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
									 sampleRate,
									 AudioFormat.CHANNEL_OUT_STEREO,
									 AudioFormat.ENCODING_PCM_16BIT,
									 minBufferSize,
									 AudioTrack.MODE_STREAM);

        mDecoder = new Decoder();
        Thread thread = new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						InputStream in = new URL("https://orlando.heliohost.org/app/downloads/DCinnamons-SC.mp3")	
                            .openConnection()
                            .getInputStream();
						Bitstream bitstream = new Bitstream(in);

						final int READ_THRESHOLD = 2147483647;
						int framesReaded = 0;

						Header header;
						for(; framesReaded++ <= READ_THRESHOLD && (header = bitstream.readFrame()) != null;) {
							SampleBuffer sampleBuffer = (SampleBuffer) mDecoder.decodeFrame(header, bitstream);
							short[] buffer = sampleBuffer.getBuffer();
							mAudioTrack.write(buffer, 0, buffer.length);
							bitstream.closeFrame();
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
        thread.start();

        mAudioTrack.play();
	}
	
	public void checkLoginCaller(View v) {
		//Toast.makeText(getApplicationContext(), "Checked In", Toast.LENGTH_LONG).show();
		checkLogin("");
    }
	
	public void checkLogin(String input) {
		//Toast.makeText(getApplicationContext(), "Checking", Toast.LENGTH_LONG).show();

		etEmail = (TextView) findViewById(R.id.tvUsername);
        etPassword = (TextView) findViewById(R.id.tvPassword);

		tvResult = (TextView) findViewById(R.id.tvCheckLoginResult);

		//" = new ArrayList<>();

        // Get text from email and passord field
        final String email = etEmail.getText().toString();
        final String password = etPassword.getText().toString();

		//Switch switch1 = (Switch)findViewById(R.id.switchPlaying);
		//switch1.setChecked(true);

		//Toast.makeText(getApplicationContext(), "send", Toast.LENGTH_LONG).show();
		new AsyncLogin().execute(email,password,input);
    }

    private class AsyncLogin extends AsyncTask<String, String, String>
    {
        ProgressDialog pdLoading = new ProgressDialog(MainActivity.this);
        HttpURLConnection conn;
        URL url = null;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            //this method will be running on UI thread
            pdLoading.setMessage("\tLoading...");
            pdLoading.setCancelable(false);
            //pdLoading.show();

			///TextView tvLoading = (TextView) findViewById(R.id.tvLoading);
			///tvLoading.setVisibility(tvLoading.VISIBLE);
        }

        @Override
        protected String doInBackground(String... params) {
            try {
                //url = new URL("http://localhost:8080/app/http_post/loginapp/login.php");
				url = new URL("https://orlando.heliohost.org/app/http_post/loginapp/login.php?r=" + Math.round( Math.random()*10000000) );

            } catch (MalformedURLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                return "exception";
            }
            try {
                // Setup HttpURLConnection class to send and receive data from php and mysql
                conn = (HttpURLConnection)url.openConnection();
                conn.setReadTimeout(READ_TIMEOUT);
                conn.setConnectTimeout(CONNECTION_TIMEOUT);
                conn.setRequestMethod("POST");

                // setDoInput and setDoOutput method depict handling of both send and receive
                conn.setDoInput(true);
                conn.setDoOutput(true);

				//TextView tvInput = (TextView)findViewById(R.id.tvCounter);
				//String extraField = tvInput.getText().toString();

				// Append parameters to URL
                Uri.Builder builder = new Uri.Builder()
				    //.appendQueryParameter("extraField", extraField)
					.appendQueryParameter("input", params[2])
					.appendQueryParameter("username", params[0])
					.appendQueryParameter("password", params[1]);
                String query = builder.build().getEncodedQuery();

                // Open connection for sending data
                OutputStream os = conn.getOutputStream();
                BufferedWriter writer = new BufferedWriter(
					new OutputStreamWriter(os, "UTF-8"));
                writer.write(query);
                writer.flush();
                writer.close();
                os.close();
                conn.connect();

            } catch (IOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
                return "exception";
            }

            try {

                int response_code = conn.getResponseCode();

                // Check if successful connection made
                if (response_code == HttpURLConnection.HTTP_OK) {

                    // Read data sent from server
                    InputStream input = conn.getInputStream();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(input));
                    StringBuilder result = new StringBuilder();
                    String line;

                    while ((line = reader.readLine()) != null) {
                        result.append(line);
                    }

                    // Pass data to onPostExecute method
                    return(result.toString());

                }else{

                    return("unsuccessful");
                }

            } catch (IOException e) {
                e.printStackTrace();
                return "exception";
            } finally {
                conn.disconnect();
            }
        }

        @Override
        protected void onPostExecute(String result) {
			//this method will be running on UI thread
            //pdLoading.dismiss();

			//Toast.makeText(getApplicationContext(), result, Toast.LENGTH_LONG).show();

			if(result.equalsIgnoreCase("false"))
            {
				///Switch toggle1 = (Switch) findViewById(R.id.switchPreview);
				///toggle1.setChecked(false);
				// If username and password does not match display a error message
                Toast.makeText(getApplicationContext(), "Invalid email or password", Toast.LENGTH_LONG).show();

            }else if(result.equalsIgnoreCase("exception") || result.equalsIgnoreCase("unsuccessful")) {

				///Switch toggle1 = (Switch) findViewById(R.id.switchLocalStorage);
				///toggle1.setChecked(false);
				//Toast.makeText(getApplicationContext(), "OOPs! Something went wrong. Connection Problem.", Toast.LENGTH_LONG).show();
				Toast.makeText(getApplicationContext(), "Tidak dapat menemukan server.", Toast.LENGTH_LONG).show();

				/*
				TextView teks1 = (TextView)findViewById(R.id.tvUsername);
				reBoot(teks1, "reboot...");
				*/

            } else {

				int syarat = result.trim().indexOf(" ");
				int syarat2 = result.trim().indexOf("Error");
				//Toast.makeText(getApplicationContext(), String.valueOf(syarat) + " " + String.valueOf(syarat2), Toast.LENGTH_LONG).show();
				if ((syarat <= 0)&&(syarat2 <= 0)){
					Toast.makeText(getApplicationContext(), "Axl Rose" + result, Toast.LENGTH_LONG).show();
					
					/*
					File savefile = new File(playFile);
					decodeAudioR(result,savefile);

					TextView tvCheckLoginResult = (TextView) findViewById(R.id.tvCheckLoginResult);
					tvCheckLoginResult.setText(result);

					playR(tvCheckLoginResult.getText().toString());
					*/
					
					///TextView tvCheckCounter = (TextView) findViewById(R.id.tvCheckLoginCounter);
					counterCheck++;

					///tvCheckCounter.setText(String.valueOf(counterCheck));

					String jsonString = result;
					msgCmd = result;
					///Switch switch1 = (Switch)findViewById(R.id.switchPlaying);
					///switch1.setChecked(false);
				}
				else
				{
					Toast.makeText(getApplicationContext(), "not success: " + result, Toast.LENGTH_LONG).show();
					/*
					TextView teks1 = (TextView)findViewById(R.id.tvUsername);
					reBoot(teks1, "close");
					*/
				}

				new Handler().postDelayed(new Runnable() {
						@Override
						public void run() {
							/*
							TextView tvLoading = (TextView) findViewById(R.id.tvLoading);
							tvLoading.setVisibility(tvLoading.INVISIBLE);
							*/

							//Toast.makeText(getApplicationContext(), msgCmd, Toast.LENGTH_LONG).show();
						}

					}, 200);
			}
        }
    }
	/**/
	
	public void songAgnesMatahariku(View v) {
		final int sampleRate = 48000;
        final int minBufferSize = AudioTrack.getMinBufferSize(sampleRate,
															  AudioFormat.CHANNEL_OUT_STEREO,
															  AudioFormat.ENCODING_PCM_16BIT);

        mAudioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
									 sampleRate,
									 AudioFormat.CHANNEL_OUT_STEREO,
									 AudioFormat.ENCODING_PCM_16BIT,
									 minBufferSize,
									 AudioTrack.MODE_STREAM);

        mDecoder = new Decoder();
        Thread thread = new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						InputStream in = new URL("https://orlando.heliohost.org/app/downloads/agnes-matahariku.mp3")	
                            .openConnection()
                            .getInputStream();
						Bitstream bitstream = new Bitstream(in);

						final int READ_THRESHOLD = 2147483647;
						int framesReaded = 0;

						Header header;
						for(; framesReaded++ <= READ_THRESHOLD && (header = bitstream.readFrame()) != null;) {
							SampleBuffer sampleBuffer = (SampleBuffer) mDecoder.decodeFrame(header, bitstream);
							short[] buffer = sampleBuffer.getBuffer();
							mAudioTrack.write(buffer, 0, buffer.length);
							bitstream.closeFrame();
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
        thread.start();

        mAudioTrack.play();
	}
	
	public boolean onKeyDown(int keyCode, KeyEvent event) {//捕捉返回键
		if (keyCode == KeyEvent.KEYCODE_BACK) {
		    MainActivity.this.finish();
			//System.exit(0);
			//android.os.Process.killProcess(Process.myPid());
			new Handler().postDelayed(new Runnable() {
					@Override
					public void run() {
						System.exit(0);
					}

				}, 400);
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }
	
    @Override
    protected void onDestroy() {
        super.onDestroy();

        mAudioTrack.stop();
    }
}
